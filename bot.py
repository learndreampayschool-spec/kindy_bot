import os
import json
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# --- Load env and init ---
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 711960970  # ‚Üê –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

bot = Bot(token=API_TOKEN, parse_mode="HTML")  # –º–æ–∂–Ω–∞ "HTML" –∞–±–æ None
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

MENU_FILE = "menu_data.json"

# === Helpers for long messages & schema migration ===

MAX_TG = 4000  # –∑–∞–ø–∞—Å –¥–æ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram 4096 —Å–∏–º–≤–æ–ª—ñ–≤

def split_text(text: str, max_len: int = MAX_TG):
    """–†–æ–∑—É–º–Ω–∏–π –ø–æ–¥—ñ–ª –¥–æ–≤–≥–æ–≥–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ —à–º–∞—Ç–∫–∏ ‚â§ max_len."""
    seps = ["\n\n", "\n", ". "]
    chunks, buf = [], text or ""
    for sep in seps:
        if len(buf) <= max_len:
            break
        while len(buf) > max_len:
            cut = buf.rfind(sep, 0, max_len)
            if cut == -1:
                cut = max_len
            chunks.append(buf[:cut].rstrip())
            buf = buf[cut:].lstrip()
    if buf:
        chunks.append(buf)
    return chunks

def ensure_topic_structure(topic_obj: dict):
    """
    –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:
      {'text': '...'} ‚Üí
      {'messages': ['...'], 'media': [], 'links': []}
    —ñ –≥–∞—Ä–∞–Ω—Ç—ñ—è –∫–ª—é—á—ñ–≤ —É –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.
    """
    if topic_obj is None:
        return {"messages": [], "media": [], "links": []}
    if "messages" not in topic_obj:
        msgs = []
        if topic_obj.get("text"):
            msgs.append(topic_obj["text"])
        topic_obj["messages"] = msgs
    topic_obj.setdefault("media", [])
    topic_obj.setdefault("links", [])
    return topic_obj

def migrate_menu_schema(data: dict):
    """–ü—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å—ñ—Ö —Ç–µ–º–∞—Ö —ñ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å messages[]."""
    for age_key, seasons in data.items():
        for season_key, topics in seasons.items():
            for topic_key, topic_obj in list(topics.items()):
                topics[topic_key] = ensure_topic_structure(topic_obj)
    return data

def load_menu():
    with open(MENU_FILE, encoding="utf-8") as f:
        raw = json.load(f)
    return migrate_menu_schema(raw)

def save_menu(data):
    with open(MENU_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

menu_data = load_menu()

# === FSM ===

class MenuStates(StatesGroup):
    age = State()
    season = State()
    topic = State()

class AdminStates(StatesGroup):
    age = State()
    season = State()
    topic = State()
    action = State()
    content = State()

class AdminMsgStates(StatesGroup):
    """–†–æ–±–æ—Ç–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ –º–µ–∂–∞—Ö —Ç–µ–º–∏ (add/edit/delete)."""
    age = State()
    season = State()
    topic = State()
    mode = State()        # "add" / "edit" / "delete"
    list_wait = State()   # –≤–∏–±—ñ—Ä –Ω–æ–º–µ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    content = State()     # –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è add/edit

class AdminRenameStates(StatesGroup):
    """–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏."""
    age = State()
    season = State()
    topic = State()
    new_title = State()

# === UI helpers ===

def make_keyboard(options, add_back=True):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for opt in options:
        kb.add(KeyboardButton(opt))
    if add_back:
        kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

admin_panel_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_panel_kb.add(
    KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–º—É"),
    KeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ç–µ–º—É"),
)
admin_panel_kb.add(
    KeyboardButton("üß© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–º–∏ (–¥–æ–¥–∞—Ç–∏/—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏)"),
)
admin_panel_kb.add(
    KeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–º—É"),
    KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
)

def make_mode_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
    kb.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
    kb.add(KeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb

# ========================= USER FLOW =========================

@dp.message_handler(commands=['start'], state="*")
async def start_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    kb = make_keyboard(list(menu_data.keys()), add_back=False)
    if message.from_user.id == ADMIN_ID:
        kb.add(KeyboardButton("üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)
    await MenuStates.age.set()

@dp.message_handler(lambda m: m.text in menu_data, state=MenuStates.age)
async def choose_season(message: types.Message, state: FSMContext):
    age = message.text.strip()
    await state.update_data(age=age)
    seasons = menu_data[age].keys()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω:", reply_markup=make_keyboard(seasons))
    await MenuStates.season.set()

@dp.message_handler(lambda m: m.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state=MenuStates.season)
async def back_to_age(message: types.Message, state: FSMContext):
    await start_cmd(message, state)

@dp.message_handler(state=MenuStates.season)
async def choose_topic(message: types.Message, state: FSMContext):
    data = await state.get_data()
    age = data["age"]
    season = message.text.strip()
    if season not in menu_data[age]:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Å–µ–∑–æ–Ω")
        return
    await state.update_data(season=season)
    topics = list(menu_data[age][season].keys())
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=make_keyboard(topics))
    await MenuStates.topic.set()

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", state=MenuStates.topic)
async def back_to_season(message: types.Message, state: FSMContext):
    data = await state.get_data()
    age = data.get("age", "")
    seasons = list(menu_data[age].keys())
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω:", reply_markup=make_keyboard(seasons))
    await MenuStates.season.set()


@dp.message_handler(state=MenuStates.topic)
async def handle_topic_selection(message: types.Message, state: FSMContext):
    text = message.text.strip()

    # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        age = data.get("age", "")
        seasons = list(menu_data[age].keys())
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω:", reply_markup=make_keyboard(seasons))
        return await MenuStates.season.set()

    # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ "üì© –¢–µ–∫—Å—Ç –¥–ª—è –±–∞—Ç—å–∫—ñ–≤"
    if text == "üì© –¢–µ–∫—Å—Ç –¥–ª—è –±–∞—Ç—å–∫—ñ–≤":
        data = await state.get_data()
        age = data.get("age")
        season = data.get("season")
        topic = data.get("topic")

        topic_obj = menu_data.get(age, {}).get(season, {}).get(topic)
        topic_obj = ensure_topic_structure(topic_obj)
        messages_list = topic_obj.get("messages", [])

        if not messages_list:
            return await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É —Ç–µ–º—ñ.")

        first_msg = messages_list[0]
        for chunk in split_text(first_msg):
            await message.answer(chunk)
        return

    # –Ü–Ω–∞–∫—à–µ ‚Äî –∑–≤–∏—á–∞–π–Ω–∏–π –≤–∏–±—ñ—Ä —Ç–µ–º–∏
    data = await state.get_data()
    age = data.get("age")
    season = data.get("season")
    topic = text

    topic_obj = menu_data.get(age, {}).get(season, {}).get(topic)
    if not topic_obj:
        await message.answer("‚õî –¢–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return

    await state.update_data(topic=topic)

    topic_obj = ensure_topic_structure(topic_obj)
    messages_list = topic_obj.get("messages", [])
    if not messages_list:
        await message.answer(
            "üî∏ –ù–∞—Ä–∞–∑—ñ —É —Ç–µ–º—ñ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.",
            reply_markup=make_keyboard(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], add_back=False)
        )
        return

    for msg_text in messages_list:
        for chunk in split_text(msg_text):
            await message.answer(chunk)

    await message.answer(
        "–ì–æ—Ç–æ–≤–æ ‚úÖ",
        reply_markup=make_keyboard(["üì© –¢–µ–∫—Å—Ç –¥–ª—è –±–∞—Ç—å–∫—ñ–≤", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], add_back=False)
    )



# ========================= ADMIN FLOW =========================

@dp.message_handler(lambda m: m.text == "üõ† –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", state="*")
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")
        return
    await state.finish()
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_panel_kb)

# ----- –°—Ç–∞—Ä–µ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–º–∞–º–∏ (add/edit/delete) -----

@dp.message_handler(lambda m: m.text in ["‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–º—É", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–º—É"], state="*")
async def choose_admin_action_simple(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")
    action_map = {
        "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–º—É": "add",
        "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–º—É": "delete"
    }
    await state.set_state(AdminStates.age)
    await state.update_data(action=action_map[message.text])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=make_keyboard(list(menu_data.keys())))

@dp.message_handler(lambda m: m.text == "‚úèÔ∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ç–µ–º—É", state="*")
async def rename_topic_entry(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")
    await state.finish()
    await AdminRenameStates.age.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=make_keyboard(list(menu_data.keys())))

@dp.message_handler(state=AdminStates.age)
async def admin_choose_season(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await admin_panel(message, state)
    age = message.text.strip()
    if age not in menu_data:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
        return
    await state.update_data(age=age)
    await AdminStates.season.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω:", reply_markup=make_keyboard(menu_data[age].keys()))

@dp.message_handler(state=AdminStates.season)
async def admin_choose_topic(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await choose_admin_action_simple(message, state)
    data = await state.get_data()
    age = data['age']
    season = message.text.strip()
    if season not in menu_data[age]:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Å–µ–∑–æ–Ω")
        return
    await state.update_data(season=season)
    await AdminStates.topic.set()
    topics = list(menu_data[age][season].keys())
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=make_keyboard(topics))

@dp.message_handler(state=AdminStates.topic)
async def admin_topic_action(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await admin_choose_season(message, state)

    data = await state.get_data()
    action = data['action']
    age, season, topic = data['age'], data['season'], message.text.strip()
    await state.update_data(topic=topic)

    if action == "delete":
        if topic in menu_data[age][season]:
            del menu_data[age][season][topic]
            save_menu(menu_data)
            await message.answer("‚úÖ –¢–µ–º—É –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_panel_kb)
        else:
            await message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_panel_kb)
        await state.finish()
        return

    # action == "add": –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è ¬´–ø–µ—Ä—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è¬ª —Ç–µ–º–∏
    await AdminStates.content.set()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ç–µ–º–∏ (–±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è):", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=AdminStates.content)
async def admin_save_content(message: types.Message, state: FSMContext):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è '–ø–µ—Ä—à–æ–≥–æ' –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–º–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é."""
    data = await state.get_data()
    age, season, topic = data["age"], data["season"], data["topic"]
    content = (message.text or "").strip()
    if not content:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")
        return

    topic_obj = menu_data[age][season].get(topic)
    if not topic_obj:
        # —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Ç–µ–º—É
        menu_data[age][season][topic] = {"messages": [content], "media": [], "links": []}
    else:
        topic_obj = ensure_topic_structure(topic_obj)
        if topic_obj["messages"]:
            topic_obj["messages"][0] = content
        else:
            topic_obj["messages"].append(content)
        menu_data[age][season][topic] = topic_obj

    save_menu(menu_data)
    await message.answer("‚úÖ –¢–µ–º—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=admin_panel_kb)
    await state.finish()

# ----- –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏ -----

@dp.message_handler(state=AdminRenameStates.age)
async def rename_topic_age(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await admin_panel(message, state)
    age = message.text.strip()
    if age not in menu_data:
        return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
    await state.update_data(age=age)
    await AdminRenameStates.season.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω:", reply_markup=make_keyboard(menu_data[age].keys()))

@dp.message_handler(state=AdminRenameStates.season)
async def rename_topic_season(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await rename_topic_entry(message, state)
    data = await state.get_data()
    age = data["age"]
    season = message.text.strip()
    if season not in menu_data[age]:
        return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Å–µ–∑–æ–Ω")
    await state.update_data(season=season)
    topics = list(menu_data[age][season].keys())
    await AdminRenameStates.topic.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è:", reply_markup=make_keyboard(topics))

@dp.message_handler(state=AdminRenameStates.topic)
async def rename_topic_pick(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await rename_topic_season(message, state)
    data = await state.get_data()
    age, season = data["age"], data["season"]
    old_topic = message.text.strip()
    if old_topic not in menu_data[age][season]:
        return await message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    await state.update_data(old_topic=old_topic)
    await AdminRenameStates.new_title.set()
    await message.answer(f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞: ¬´{old_topic}¬ª\n\n–í–≤–µ–¥–∏ –ù–û–í–£ –Ω–∞–∑–≤—É —Ç–µ–º–∏:", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(state=AdminRenameStates.new_title)
async def rename_topic_apply(message: types.Message, state: FSMContext):
    data = await state.get_data()
    age, season, old_topic = data["age"], data["season"], data["old_topic"]
    new_title = (message.text or "").strip()
    if not new_title:
        return await message.answer("–ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é. –í–≤–µ–¥–∏ —ñ–Ω—à—É:")
    # –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –∫–ª—é—á —Ç–µ–º–∏ –≤ JSON
    topic_obj = menu_data[age][season].pop(old_topic)
    menu_data[age][season][new_title] = topic_obj
    save_menu(menu_data)
    await state.finish()
    await message.answer(f"‚úÖ –ù–∞–∑–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ¬´{new_title}¬ª", reply_markup=admin_panel_kb)

# ----- –ù–û–í–ï: —Ä–æ–±–æ—Ç–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ —Ç–µ–º–∏ (add/edit/delete) -----

@dp.message_handler(lambda m: m.text == "üß© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–µ–º–∏ (–¥–æ–¥–∞—Ç–∏/—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏)", state="*")
async def admin_msgs_entry(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")
    await state.finish()
    await AdminMsgStates.age.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=make_keyboard(list(menu_data.keys())))

@dp.message_handler(state=AdminMsgStates.age)
async def admin_msgs_choose_season(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await admin_panel(message, state)
    age = message.text.strip()
    if age not in menu_data:
        return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è")
    await state.update_data(age=age)
    await AdminMsgStates.season.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–µ–∑–æ–Ω:", reply_markup=make_keyboard(menu_data[age].keys()))

@dp.message_handler(state=AdminMsgStates.season)
async def admin_msgs_choose_topic(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await admin_msgs_entry(message, state)
    data = await state.get_data()
    age = data['age']
    season = message.text.strip()
    if season not in menu_data[age]:
        return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Å–µ–∑–æ–Ω")
    await state.update_data(season=season)
    topics = list(menu_data[age][season].keys())
    await AdminMsgStates.topic.set()
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=make_keyboard(topics))

@dp.message_handler(state=AdminMsgStates.topic)
async def admin_msgs_mode(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await admin_msgs_choose_topic(message, state)
    data = await state.get_data()
    age, season = data["age"], data["season"]
    topic = message.text.strip()
    if topic not in menu_data[age][season]:
        return await message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    await state.update_data(topic=topic)
    await AdminMsgStates.mode.set()
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=make_mode_kb())

@dp.message_handler(state=AdminMsgStates.mode)
async def admin_msgs_route(message: types.Message, state: FSMContext):
    action = message.text.strip()
    data = await state.get_data()
    age, season, topic = data["age"], data["season"], data["topic"]
    topic_obj = ensure_topic_structure(menu_data[age][season][topic])
    msgs = topic_obj["messages"]

    if action == "‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è":
        await AdminMsgStates.content.set()
        return await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –ù–û–í–û–ì–û –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤–≥–∏–º):", reply_markup=ReplyKeyboardRemove())

    if action in ("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"):
        if not msgs:
            await AdminMsgStates.mode.set()
            return await message.answer("–£ —Ç–µ–º—ñ —â–µ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", reply_markup=make_mode_kb())
        # —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É —ñ–Ω–¥–µ–∫—Å—É
        kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        for i in range(1, len(msgs)+1):
            kb.add(KeyboardButton(str(i)))
        kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        await state.update_data(op="edit" if "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" in action else "delete")
        await AdminMsgStates.list_wait.set()
        return await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", reply_markup=kb)

    if action == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        topics = list(menu_data[age][season].keys())
        await AdminMsgStates.topic.set()
        return await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", reply_markup=make_keyboard(topics))

    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")

@dp.message_handler(state=AdminMsgStates.list_wait)
async def admin_msgs_pick_index(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await AdminMsgStates.mode.set()
        return await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=make_mode_kb())

    if not (message.text or "").isdigit():
        return await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
    idx = int(message.text) - 1

    data = await state.get_data()
    age, season, topic, op = data["age"], data["season"], data["topic"], data["op"]
    topic_obj = ensure_topic_structure(menu_data[age][season][topic])
    msgs = topic_obj["messages"]

    if idx < 0 or idx >= len(msgs):
        return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä.")

    await state.update_data(index=idx)

    if op == "edit":
        await AdminMsgStates.content.set()
        prev = msgs[idx]
        preview = prev if len(prev) < 900 else prev[:900] + "‚Ä¶"
        return await message.answer(
            "–ù–∞–¥—ñ—à–ª–∏ –ù–û–í–ò–ô —Ç–µ–∫—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å—Ç–∞—Ä–∏–π –∑–∞–º—ñ–Ω–∏—Ç—å—Å—è –ø–æ–≤–Ω—ñ—Å—Ç—é):\n\n" + preview,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        # delete
        del msgs[idx]
        save_menu(menu_data)
        await AdminMsgStates.mode.set()
        return await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=make_mode_kb())

@dp.message_handler(state=AdminMsgStates.content)
async def admin_msgs_save_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    age, season, topic = data["age"], data["season"], data["topic"]
    topic_obj = ensure_topic_structure(menu_data[age][season][topic])
    msgs = topic_obj["messages"]

    new_text = (message.text or "").strip()
    if not new_text:
        return await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")

    idx = data.get("index", None)
    if idx is None:
        # ADD
        msgs.append(new_text)
        save_menu(menu_data)
        await AdminMsgStates.mode.set()
        return await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ.", reply_markup=make_mode_kb())
    else:
        # EDIT
        msgs[idx] = new_text
        save_menu(menu_data)
        await state.update_data(index=None)
        await AdminMsgStates.mode.set()
        return await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=make_mode_kb())

# ==== RUN ====

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
